import { createAsyncThunk, createSlice, PayloadAction, current } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchData } from './optimaAPI';

type RawContent = {
  parentEntityLongIds: Array<number>,
  labels:  Array<string>,
  entityLongIds: Array<number>,
  entityLongIdsMap: Record<number, number>
}

const getParentChildrenMap = (raw: RawContent) => {
  const categoriesParentChildren: Record<number, Array<number>> = {}

    for (let i=0; i<raw.parentEntityLongIds.length; i++){
      const each = raw.parentEntityLongIds[i];      

      if(each===-1){
        if(!categoriesParentChildren[0]){
          categoriesParentChildren[0] = [];
        }        
        categoriesParentChildren[0].push(raw.entityLongIds[i])
      } else {

      if(!categoriesParentChildren[each]){
        categoriesParentChildren[each]=[];        
      }
        categoriesParentChildren[each].push(raw.entityLongIds[i]);
      }
    }

    return categoriesParentChildren
}

const getItems = (array: Array<number>, parentChildren: Record<string, Array<any>>) => {

  const res: Record<number, any> = {};
  
  array.forEach((each)=>{
    const children = parentChildren[each];

    if(!res[each]){
      res[each] = {       
        value: each
      }
    }

    if(!children){          
      return null;
    }

    else {     
      res[each].children = (getItems(children, parentChildren));                  
    }  
  });  

  return res   
}

export interface OptimaState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  content: RawContent;
  items: Record<any, any> | null,
  currentItem: Record<string, number | string> | null
}

const initialState: OptimaState = {
  value: 0,
  status: 'idle',
  content: {
    parentEntityLongIds: [],
    labels: [],
    entityLongIds: [],  
    entityLongIdsMap: {}  
  },
  items: null,
  currentItem: null  
};


export const getDataAsync = createAsyncThunk(
  'optima/fetchData',
  async () => {
    const response = await fetchData();   
    const raw = response.entityLabelPages[0];

    const entityLongIdsMap: Record<string, number> = {}
    
    raw.entityLongIds.forEach((each: number, i:number)=>{
      entityLongIdsMap[each] =  i;
    });

    const parentChildren = getParentChildrenMap(raw);
    const items = getItems(parentChildren[0], parentChildren);   
    
    return {raw: {...response.entityLabelPages[0], entityLongIdsMap}, items };
  }
);

export const optimaSlice = createSlice({
  name: 'optima',
  initialState,  
  reducers: {   
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
    setCurrentItem: (state, action: PayloadAction<number>) => {
      
      const content = current(state).content;
      const idx = content.entityLongIdsMap[action.payload];
      const label = content.labels[idx];
      const parentId = content.parentEntityLongIds[idx];      

      state.currentItem = {
        label,
        id: action.payload,
        parentId
      };
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDataAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDataAsync.fulfilled, (state, action) => {        
        state.status = 'idle';       
        state.content = action.payload.raw;
        state.items = action.payload.items;
      })
      .addCase(getDataAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { decrement, incrementByAmount, setCurrentItem } = optimaSlice.actions;

export const selectStatusLoading = (state: RootState) => state.optima.status;
export const selectCount = (state: RootState) => state.optima.value;
export const selectParentEntityLongIds = (state: RootState) => state.optima.content.parentEntityLongIds;
export const selectLabels = (state: RootState) => state.optima.content.labels;
export const selectEntityLongIds = (state: RootState) => state.optima.content.entityLongIds;
export const selectEntityLongIdsMap = (state: RootState) => state.optima.content.entityLongIdsMap;
export const selectItems = (state: RootState) => state.optima.items;
export const selectCurrentItem = (state: RootState) => state.optima.currentItem;


export default optimaSlice.reducer;
