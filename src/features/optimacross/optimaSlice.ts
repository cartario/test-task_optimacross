import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { fetchData } from './optimaAPI';

export interface OptimaState {
  value: number;
  status: 'idle' | 'loading' | 'failed';
  content: {
    parentEntityLongIds: Array<number>,
    labels:  Array<string>,
    entityLongIds: Array<number>
  }
}

const initialState: OptimaState = {
  value: 0,
  status: 'idle',
  content: {
    parentEntityLongIds: [],
    labels: [],
    entityLongIds: []
  }
};


export const getDataAsync = createAsyncThunk(
  'optima/fetchData',
  async () => {
    const response = await fetchData();   
    const raw = response.entityLabelPages[0];

    const checkChildren = (id: number) => {
      const idx = raw.entityLongIds.findIndex((each: number)=>each===id);     

      return raw.parentEntityLongIds[idx]
    }

    let topLevelsIdxs: Array<number> = [];
    
    raw.parentEntityLongIds.forEach((each: number, i: number)=>{
      if(each===-1){
        topLevelsIdxs.push(i)
      }
    });

    const res = topLevelsIdxs.map(each=>{
      const currentId = raw.entityLongIds[each];

      let childrenIds: Array<number> = [];
      raw.parentEntityLongIds.forEach((parentId: number, i: number)=>{
       if(parentId===currentId){
        childrenIds.push(i)
       }
     })      

      return ({
        currentId,
        index: each,
        childrenIds,
        children: []
      })
    })

    debugger;
    return response.entityLabelPages[0];
  }
);

export const optimaSlice = createSlice({
  name: 'optima',
  initialState,  
  reducers: {   
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getDataAsync.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getDataAsync.fulfilled, (state, action) => {        
        state.status = 'idle';       
        state.content = action.payload;
      })
      .addCase(getDataAsync.rejected, (state) => {
        state.status = 'failed';
      });
  },
});

export const { decrement, incrementByAmount } = optimaSlice.actions;

export const selectCount = (state: RootState) => state.optima.value;
export const selectParentEntityLongIds = (state: RootState) => state.optima.content.parentEntityLongIds;
export const selectLabels = (state: RootState) => state.optima.content.labels;
export const selectEntityLongIds = (state: RootState) => state.optima.content.entityLongIds;

export default optimaSlice.reducer;
